#ENGINEERING PROGRAM - FOR CALCULATING FORCES WHICH OCCUR ON BRIDGES AND HELPING FIND THE DIFFERENT ASPECTS IMPORTANT IN THEIR BUILDING
#obliczanie rozkładu sił na prętach mostu gdy wjeżdża na niego samochód
class Most:
    def __init__(self, dlugosc, masa, masa_samochodu, odleglosc_pretow, predkosc_samochodu, max_sila_rozciagajaca):
        self.dlugosc = dlugosc
        self.masa = masa
        self.masa_samochodu = masa_samochodu
        self.odleglosc_pretow = odleglosc_pretow
        self.predkosc_samochodu = predkosc_samochodu
        self.max_sila_rozciagajaca = max_sila_rozciagajaca
        self.g = 9.81  # Przyspieszenie ziemskie w m/s^2

    def pozycja_samochodu(self, t):
        return self.predkosc_samochodu * t

    def sily_w_pretach(self, t):
        x_s = self.pozycja_samochodu(t)

        if x_s < 0 or x_s > self.dlugosc:
            raise ValueError("Samochód znajduje się poza mostem")

        a = self.odleglosc_pretow
        L = self.dlugosc
        M = self.masa
        m_s = self.masa_samochodu
        g = self.g

        # Równania równowagi momentów względem lewego pręta
        moment_samochodu = m_s * g * (x_s - a)
        moment_mostu = M * g * (L / 2 - a)
        suma_momentow = moment_samochodu + moment_mostu

        # Suma sił w pionie musi równać się ciężarowi mostu i samochodu
        suma_sil = (M + m_s) * g

        # Rozwiązujemy równania równowagi
        F_P = suma_momentow / (L - 2 * a)
        F_L = suma_sil - F_P

        # Sprawdzamy, czy siły nie przekraczają maksymalnej siły rozciągającej
        if F_L > self.max_sila_rozciagajaca or F_P > self.max_sila_rozciagajaca:
            raise ValueError("Siła przekracza maksymalną wytrzymałość prętów")

        return F_L, F_P

    def F1(self, t):
        F_L, _ = self.sily_w_pretach(t)
        return F_L

    def F2(self, t):
        _, F_P = self.sily_w_pretach(t)
        return F_P

def main():
    # Pobieranie danych od użytkownika
    dlugosc = float(input("Podaj długość mostu (m): "))
    masa = float(input("Podaj masę mostu (kg): "))
    masa_samochodu = float(input("Podaj masę samochodu (kg): "))
    odleglosc_pretow = float(input("Podaj odległość prętów od brzegów mostu (m): "))
    predkosc_samochodu = float(input("Podaj prędkość samochodu (m/s): "))
    max_sila_rozciagajaca = 35000  # Maksymalna siła rozciągająca w N (35 kN)
    
    # Tworzenie obiektu Most
    most = Most(dlugosc, masa, masa_samochodu, odleglosc_pretow, predkosc_samochodu, max_sila_rozciagajaca)

    # Pobieranie i przetwarzanie danych dotyczących czasu
    while True:
        czas_input = input("Podaj czas (s) lub wpisz 'stop' aby zakończyć: ")
        if czas_input.lower() == 'stop':
            break
        
        try:
            t = float(czas_input)
            F_L = most.F1(t)
            F_P = most.F2(t)
            print(f"Czas: {t} s, Siła w lewym pręcie (F1): {F_L:.2f} N, Siła w prawym pręcie (F2): {F_P:.2f} N")
        except ValueError as e:
            print(f"Błąd: {e}")

if __name__ == "__main__":
    main()


#most łukowy - jaką musi mieć minimalną długość?
import math  # noqa: E402

def minimalna_dlugosc_materialu(m, lambda_, d, N):
    # Promień półokręgu
    r = d / 2

    # Długość łuku półokręgu
    L = math.pi * r

    # Masa na jednostkę długości
    masa_na_jednostke = m / L

    # Sprawdzamy naprężenie
    if masa_na_jednostke > N:
        raise ValueError("Materiał nie jest w stanie wytrzymać maksymalnego naprężenia")

    return L

# Przykładowe dane
m = float(input("Podaj masę m (kg): "))
lambda_ = float(input("Podaj masę na jednostkę długości λ (kg/m): "))
d = float(input("Podaj odległość między końcami mostu d (m): "))
N = float(input("Podaj maksymalne naprężenie materiału N (N/m^2): "))

# Obliczanie minimalnej długości materiału
try:
    dlugosc_materialu = minimalna_dlugosc_materialu(m, lambda_, d, N)
    print(f"Minimalna długość materiału wynosi: {dlugosc_materialu:.2f} m")
except ValueError as e:
    print(f"Błąd: {e}")

#jakie rzeczy wziąć pod uwagę przy budowie mostu?
import random  # noqa: E402

def generuj_aspekty():
    aspekty_naturalne = [
        "Rzeźba terenu", "Rodzaj gleby", "Obecność rzeki", "Prąd wody", "Głębokość wody", 
        "Podłoże skalne", "Trzęsienia ziemi", "Klimat", "Warunki pogodowe", "Wysokość nad poziomem morza",
        "Roślinność", "Fauna", "Strefy ochronne przyrody", "Ekosystemy wodne", "Skały osadowe",
        "Jaskinie", "Bagna", "Zalewy", "Tereny zalewowe", "Wiatry"
    ]

    aspekty_sztuczne = [
        "Istniejąca infrastruktura drogowa", "Linie kolejowe", "Linie energetyczne", 
        "Rurociągi", "Budynki i struktury", "Strefy urbanizacyjne", "Tereny przemysłowe",
        "Strefy rekreacyjne", "Obiekty historyczne", "Granice administracyjne", "Miejsca turystyczne",
        "Strefy działalności gospodarczej", "Obiekty sportowe", "Szlaki transportowe", "Lotniska",
        "Porty", "Mosty sąsiadujące", "Tunele", "Parkingi", "Ścieżki rowerowe"
    ]

    return {
        "Aspekty naturalne": random.sample(aspekty_naturalne, 5),
        "Aspekty sztuczne": random.sample(aspekty_sztuczne, 5)
    }

def wyswietl_aspekty(aspekty):
    print("Aspekty naturalne do wzięcia pod uwagę:")
    for aspekt in aspekty["Aspekty naturalne"]:
        print(f"- {aspekt}")

    print("\nAspekty sztuczne do wzięcia pod uwagę:")
    for aspekt in aspekty["Aspekty sztuczne"]:
        print(f"- {aspekt}")

def main():
    while True:
        input("Napisz wiadomość, aby wygenerować aspekty (lub wpisz 'exit', aby zakończyć): ")
        if input().lower() == 'exit':
            break
        aspekty = generuj_aspekty()
        wyswietl_aspekty(aspekty)

# Uruchomienie głównej funkcji programu
if __name__ == "__main__":
    main()

#tworzenie mostu z identycznych kart - jak długi może on być?
def maksymalna_dlugość_mostu(liczba_kart, stosunek_dlugosci):
    dlugosc_karty = 1  # Przyjmujemy jednostkową długość dla pojedynczej karty
    maks_dl = 0
    
    for n in range(1, liczba_kart + 1):
        maks_dl += dlugosc_karty / n
    
    # Przeliczenie maksymalnej długości na rzeczywistą długość karty
    maks_dl *= stosunek_dlugosci
    return maks_dl

# Wprowadź dane
liczba_kart = int(input("Podaj liczbę kart: "))
stosunek_dlugosci = float(input("Podaj stosunek długości mostu do długości jednej karty (1 do x): "))

# Obliczanie maksymalnej długości mostu
dlugosc_mostu = maksymalna_dlugość_mostu(liczba_kart, stosunek_dlugosci)

print(f"Maksymalna długość mostu z {liczba_kart} kart ułożonych w stos to: {dlugosc_mostu:.2f} jednostek długości.")

#ostatni krok - budowa własnego mostu - plan
def przygotowanie_do_budowy():
    plan = """
Plan działania na zbudowanie mostu z patyczków - 5 godzin:

1. Przygotowanie (0:00 - 0:30)
   - Przeanalizuj projekt mostu i jego wymiarów
   - Przygotuj miejsce pracy (czysta powierzchnia, odpowiednie oświetlenie)
   - Upewnij się, że masz wszystkie potrzebne materiały i narzędzia

2. Materiały (0:30 - 1:00)
   - Patyczki do lodów lub drewniane patyczki
   - Klej (najlepiej klej na gorąco lub klej do drewna)
   - Nożyczki lub nożyk
   - Taśma klejąca (opcjonalnie)
   - Ołówek i linijka

3. Narzędzia (1:00 - 1:30)
   - Przygotuj narzędzia: klej na gorąco, nożyczki, nożyk, linijkę
   - Sprawdź, czy klej na gorąco jest gotowy do użycia (rozgrzany)
   - Upewnij się, że narzędzia są ostre i działają poprawnie

4. Montaż (1:30 - 4:30)
   - Rozpocznij od budowy fundamentów mostu
   - Sklejaj patyczki, tworząc stabilne połączenia
   - Montuj kolejne segmenty mostu, upewniając się, że są one stabilne i równe
   - Pozwól klejowi wyschnąć odpowiednio między kolejnymi etapami montażu
   - Regularnie sprawdzaj wymiary i wytrzymałość konstrukcji

5. Wykończenie (4:30 - 5:00)
   - Sprawdź całą konstrukcję pod kątem stabilności i wytrzymałości
   - Dokonaj ewentualnych poprawek lub wzmocnień
   - Pozwól klejowi całkowicie wyschnąć
   - Posprzątaj miejsce pracy

Powodzenia w budowie mostu z patyczków!
"""
    return plan

def main():
    print("Gratulacje! Pora na budowę własnego mostu. Jesteś gotowy/a?")
    odpowiedz = input().strip().lower()
    if odpowiedz in ["tak", "yes", "y", "t", "oczywiście", "gotowy", "gotowa"]:
        plan = przygotowanie_do_budowy()
        print(plan)
    else:
        print("Gdy będziesz gotowy/a, uruchom program ponownie.")

# Uruchomienie głównej funkcji programu
if __name__ == "__main__":
    main()
